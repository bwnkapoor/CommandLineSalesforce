global class @className@ implements Database.Batchable<SObject>, Schedulable, Database.stateful
{
    global String query;
    global String errors;

    public static final String QUERY_STRING = 'Select Id from @batchType@';

    global @className@( String query )
    {
        this.query = query;
        this.errors = '';
    }

    global database.querylocator start(Database.BatchableContext bc)
    {
        return Database.getQueryLocator( query );
    }

    global void execute(Database.BatchableContext bc, List<@batchType@> scope)
    {
        // Do your stuff
        List<Database.SaveResult> srList = Database.update( scope, false );
        for( Database.SaveResult sr : srList )
        {
            if( !sr.isSuccess() )
            {
                errors += 'The following errors occured on Opportunity: ' + sr.getId() + '\n';
                for( Database.Error err : sr.getErrors() )
                {
                    errors += 'Status Code: ' + err.getStatusCode() + '\n';
                    errors += 'Message: ' + err.getMessage() + '\n';
                    errors += scope.getSObjectType() + ' fields that affected this error: ' + err.getFields() ) + '\n';
                }
            }
        }
    }

    global void finish(Database.BatchableContext bc)
    {
        if( errors != '' )
        {
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            mail.setTargetObjectId( UserInfo.getUserId() );
            mail.saveAsActivity = false;
            mail.setSubject('Error while executing @className@ Process');
            mail.setPlainTextBody( errors );

            Messaging.sendEmail( new Messaging.SingleEmailMessage[] { mail } );
        }
    }

    global void execute(SchedulableContext SC)
    {
        @className@ batch = new @className@( QUERY_STRING );
        Database.executeBatch( batch );
    }
}